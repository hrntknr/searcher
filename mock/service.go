// Code generated by MockGen. DO NOT EDIT.
// Source: ../service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/hrntknr/searcher/types"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Regist mocks base method.
func (m *MockService) Regist(uri, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Regist", uri, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Regist indicates an expected call of Regist.
func (mr *MockServiceMockRecorder) Regist(uri, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Regist", reflect.TypeOf((*MockService)(nil).Regist), uri, body)
}

// Search mocks base method.
func (m *MockService) Search(str string, offset, count uint) ([]types.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", str, offset, count)
	ret0, _ := ret[0].([]types.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockServiceMockRecorder) Search(str, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockService)(nil).Search), str, offset, count)
}
