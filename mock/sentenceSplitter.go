// Code generated by MockGen. DO NOT EDIT.
// Source: ../sentenceSplitter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSentenceSplitter is a mock of SentenceSplitter interface.
type MockSentenceSplitter struct {
	ctrl     *gomock.Controller
	recorder *MockSentenceSplitterMockRecorder
}

// MockSentenceSplitterMockRecorder is the mock recorder for MockSentenceSplitter.
type MockSentenceSplitterMockRecorder struct {
	mock *MockSentenceSplitter
}

// NewMockSentenceSplitter creates a new mock instance.
func NewMockSentenceSplitter(ctrl *gomock.Controller) *MockSentenceSplitter {
	mock := &MockSentenceSplitter{ctrl: ctrl}
	mock.recorder = &MockSentenceSplitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSentenceSplitter) EXPECT() *MockSentenceSplitterMockRecorder {
	return m.recorder
}

// Split mocks base method.
func (m *MockSentenceSplitter) Split(body string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", body)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Split indicates an expected call of Split.
func (mr *MockSentenceSplitterMockRecorder) Split(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockSentenceSplitter)(nil).Split), body)
}
