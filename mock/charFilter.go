// Code generated by MockGen. DO NOT EDIT.
// Source: ../charFilter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCharFilter is a mock of CharFilter interface.
type MockCharFilter struct {
	ctrl     *gomock.Controller
	recorder *MockCharFilterMockRecorder
}

// MockCharFilterMockRecorder is the mock recorder for MockCharFilter.
type MockCharFilterMockRecorder struct {
	mock *MockCharFilter
}

// NewMockCharFilter creates a new mock instance.
func NewMockCharFilter(ctrl *gomock.Controller) *MockCharFilter {
	mock := &MockCharFilter{ctrl: ctrl}
	mock.recorder = &MockCharFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharFilter) EXPECT() *MockCharFilterMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockCharFilter) Filter(arg0 []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockCharFilterMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockCharFilter)(nil).Filter), arg0)
}
